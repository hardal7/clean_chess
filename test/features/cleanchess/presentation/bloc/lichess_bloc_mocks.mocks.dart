// Mocks generated by Mockito 5.3.2 from annotations
// in cleanchess/test/features/cleanchess/presentation/bloc/lichess_bloc_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:cleanchess/core/clean_chess/errors/failure.dart' as _i11;
import 'package:cleanchess/core/usecases/usecase.dart' as _i14;
import 'package:cleanchess/core/utilities/empty.dart' as _i15;
import 'package:cleanchess/features/clean_chess/data/repositories/lichess/lichess_account_repository.dart'
    as _i4;
import 'package:cleanchess/features/clean_chess/data/repositories/lichess/lichess_oauth_repository.dart'
    as _i2;
import 'package:cleanchess/features/clean_chess/data/repositories/lichess/lichess_team_repository.dart'
    as _i5;
import 'package:cleanchess/features/clean_chess/domain/repositories/social_repository.dart'
    as _i8;
import 'package:cleanchess/features/clean_chess/domain/repositories/team_repository.dart'
    as _i6;
import 'package:cleanchess/features/clean_chess/domain/repositories/user_repository.dart'
    as _i7;
import 'package:cleanchess/features/clean_chess/domain/usecases/oauth/lichess/lichess_oauth_lib.dart'
    as _i12;
import 'package:cleanchess/features/clean_chess/domain/usecases/teams/teams.dart'
    as _i16;
import 'package:cleanchess/features/clean_chess/domain/usecases/users/users.dart'
    as _i17;
import 'package:dartz/dartz.dart' as _i3;
import 'package:lichess_client_dio/lichess_client_dio.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;

import 'lichess_bloc_mocks.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLichessOAuthRepository_0 extends _i1.SmartFake
    implements _i2.LichessOAuthRepository {
  _FakeLichessOAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLichessAccountRepository_2 extends _i1.SmartFake
    implements _i4.LichessAccountRepository {
  _FakeLichessAccountRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLichessTeamRepository_3 extends _i1.SmartFake
    implements _i5.LichessTeamRepository {
  _FakeLichessTeamRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamRepository_4 extends _i1.SmartFake
    implements _i6.TeamRepository {
  _FakeTeamRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_5 extends _i1.SmartFake
    implements _i7.UserRepository {
  _FakeUserRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocialRepository_6 extends _i1.SmartFake
    implements _i8.SocialRepository {
  _FakeSocialRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MLichessOAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockMLichessOAuth extends _i1.Mock implements _i9.MLichessOAuth {
  @override
  _i2.LichessOAuthRepository get oAuthRepository => (super.noSuchMethod(
        Invocation.getter(#oAuthRepository),
        returnValue: _FakeLichessOAuthRepository_0(
          this,
          Invocation.getter(#oAuthRepository),
        ),
        returnValueForMissingStub: _FakeLichessOAuthRepository_0(
          this,
          Invocation.getter(#oAuthRepository),
        ),
      ) as _i2.LichessOAuthRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, Map<String, String>>> call(
          _i12.LichessOAuthParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, Map<String, String>>>.value(
                _FakeEither_1<_i11.Failure, Map<String, String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, Map<String, String>>>.value(
                _FakeEither_1<_i11.Failure, Map<String, String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, Map<String, String>>>);
}

/// A class which mocks [MLichessGainAccessToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockMLichessGainAccessToken extends _i1.Mock
    implements _i9.MLichessGainAccessToken {
  @override
  _i2.LichessOAuthRepository get oAuthRepository => (super.noSuchMethod(
        Invocation.getter(#oAuthRepository),
        returnValue: _FakeLichessOAuthRepository_0(
          this,
          Invocation.getter(#oAuthRepository),
        ),
        returnValueForMissingStub: _FakeLichessOAuthRepository_0(
          this,
          Invocation.getter(#oAuthRepository),
        ),
      ) as _i2.LichessOAuthRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, String>> call(
          _i12.LichessGainAccessTokenParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, String>>.value(
            _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, String>>.value(
                _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, String>>);
}

/// A class which mocks [MGetMyProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetMyProfile extends _i1.Mock implements _i9.MGetMyProfile {
  @override
  _i4.LichessAccountRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LichessAccountRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.User>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i13.User>>.value(
            _FakeEither_1<_i11.Failure, _i13.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i13.User>>.value(
                _FakeEither_1<_i11.Failure, _i13.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.User>>);
}

/// A class which mocks [MGetMyEmail].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetMyEmail extends _i1.Mock implements _i9.MGetMyEmail {
  @override
  _i4.LichessAccountRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LichessAccountRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, String>> call(_i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, String>>.value(
            _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, String>>.value(
                _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, String>>);
}

/// A class which mocks [MGetMyKidModeStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetMyKidModeStatus extends _i1.Mock
    implements _i9.MGetMyKidModeStatus {
  @override
  _i4.LichessAccountRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LichessAccountRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, bool>> call(_i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
            _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
                _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, bool>>);
}

/// A class which mocks [MSetMyKidModeStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSetMyKidModeStatus extends _i1.Mock
    implements _i9.MSetMyKidModeStatus {
  @override
  _i4.LichessAccountRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LichessAccountRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(bool? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MGetMyPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetMyPreferences extends _i1.Mock implements _i9.MGetMyPreferences {
  @override
  _i4.LichessAccountRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeLichessAccountRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LichessAccountRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.UserPreferences>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, _i13.UserPreferences>>.value(
                _FakeEither_1<_i11.Failure, _i13.UserPreferences>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i13.UserPreferences>>.value(
                _FakeEither_1<_i11.Failure, _i13.UserPreferences>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.UserPreferences>>);
}

/// A class which mocks [MGetTeamsByUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetTeamsByUser extends _i1.Mock implements _i9.MGetTeamsByUser {
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.Team>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.Team>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.Team>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.Team>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.Team>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.Team>>>);
}

/// A class which mocks [MGetTeamById].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetTeamById extends _i1.Mock implements _i9.MGetTeamById {
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.Team>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i13.Team>>.value(
            _FakeEither_1<_i11.Failure, _i13.Team>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i13.Team>>.value(
                _FakeEither_1<_i11.Failure, _i13.Team>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.Team>>);
}

/// A class which mocks [MGetTeamMembers].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetTeamMembers extends _i1.Mock implements _i9.MGetTeamMembers {
  @override
  _i5.LichessTeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLichessTeamRepository_3(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeLichessTeamRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.LichessTeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>> call(
          _i16.GetTeamMembersParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>);
}

/// A class which mocks [MGetTeamJoinRequests].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetTeamJoinRequests extends _i1.Mock
    implements _i9.MGetTeamJoinRequests {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.JoinRequest>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.JoinRequest>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.JoinRequest>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.JoinRequest>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.JoinRequest>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.JoinRequest>>>);
}

/// A class which mocks [MAcceptJoinRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMAcceptJoinRequest extends _i1.Mock
    implements _i9.MAcceptJoinRequest {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(
          _i16.AcceptJoinRequestParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MDeclineJoinRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMDeclineJoinRequest extends _i1.Mock
    implements _i9.MDeclineJoinRequest {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(
          _i16.DeclineJoinRequestParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MKickMemberFromTeam].
///
/// See the documentation for Mockito's code generation for more information.
class MockMKickMemberFromTeam extends _i1.Mock
    implements _i9.MKickMemberFromTeam {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(
          _i16.KickMemberFromTeamParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MJoinTeam].
///
/// See the documentation for Mockito's code generation for more information.
class MockMJoinTeam extends _i1.Mock implements _i9.MJoinTeam {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(
          _i16.JoinTeamParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MLeaveTeam].
///
/// See the documentation for Mockito's code generation for more information.
class MockMLeaveTeam extends _i1.Mock implements _i9.MLeaveTeam {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MMessageAllMembers].
///
/// See the documentation for Mockito's code generation for more information.
class MockMMessageAllMembers extends _i1.Mock
    implements _i9.MMessageAllMembers {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>> call(
          _i16.MessageAllMembersParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
            _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>.value(
                _FakeEither_1<_i11.Failure, _i15.Empty>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i15.Empty>>);
}

/// A class which mocks [MSearchTeamByName].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSearchTeamByName extends _i1.Mock implements _i9.MSearchTeamByName {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>> call(
          _i16.SearchTeamByNameParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>>.value(
                _FakeEither_1<_i11.Failure, _i13.PageOf<_i13.Team>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>>.value(
                _FakeEither_1<_i11.Failure, _i13.PageOf<_i13.Team>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>>);
}

/// A class which mocks [MGetPopularTeams].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetPopularTeams extends _i1.Mock implements _i9.MGetPopularTeams {
  @override
  _i6.TeamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>> call(
          int? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>>.value(
                _FakeEither_1<_i11.Failure, _i13.PageOf<_i13.Team>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>>.value(
                _FakeEither_1<_i11.Failure, _i13.PageOf<_i13.Team>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.PageOf<_i13.Team>>>);
}

/// A class which mocks [MSearchUsersByTerm].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSearchUsersByTerm extends _i1.Mock
    implements _i9.MSearchUsersByTerm {
  @override
  _i7.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>> call(
          _i17.SearchUsersByTermParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>);
}

/// A class which mocks [MSearchUsernamesByTerm].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSearchUsernamesByTerm extends _i1.Mock
    implements _i9.MSearchUsernamesByTerm {
  @override
  _i7.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<String>>> call(
          _i17.SearchUsernamesByTermParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, List<String>>>.value(
            _FakeEither_1<_i11.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<String>>>.value(
                _FakeEither_1<_i11.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<String>>>);
}

/// A class which mocks [MGetRealtimeStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetRealtimeStatus extends _i1.Mock
    implements _i9.MGetRealtimeStatus {
  @override
  _i7.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.RealTimeUserStatus>>> call(
          _i17.GetRealtimeStatusParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, List<_i13.RealTimeUserStatus>>>.value(
            _FakeEither_1<_i11.Failure, List<_i13.RealTimeUserStatus>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i10.Future<
                _i3.Either<_i11.Failure, List<_i13.RealTimeUserStatus>>>.value(
            _FakeEither_1<_i11.Failure, List<_i13.RealTimeUserStatus>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10
          .Future<_i3.Either<_i11.Failure, List<_i13.RealTimeUserStatus>>>);
}

/// A class which mocks [MGetTop10Players].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetTop10Players extends _i1.Mock implements _i9.MGetTop10Players {
  @override
  _i7.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, Map<String, List<_i13.User>>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, Map<String, List<_i13.User>>>>.value(
            _FakeEither_1<_i11.Failure, Map<String, List<_i13.User>>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i10.Future<
                _i3.Either<_i11.Failure, Map<String, List<_i13.User>>>>.value(
            _FakeEither_1<_i11.Failure, Map<String, List<_i13.User>>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, Map<String, List<_i13.User>>>>);
}

/// A class which mocks [MGetChessVariantLeaderboard].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetChessVariantLeaderboard extends _i1.Mock
    implements _i9.MGetChessVariantLeaderboard {
  @override
  _i7.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>> call(
          _i17.GetChessVariantLeaderboardParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>);
}

/// A class which mocks [MGetPublicData].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetPublicData extends _i1.Mock implements _i9.MGetPublicData {
  @override
  _i7.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.User>> call(
          _i17.GetPublicDataParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i13.User>>.value(
            _FakeEither_1<_i11.Failure, _i13.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i13.User>>.value(
                _FakeEither_1<_i11.Failure, _i13.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.User>>);
}

/// A class which mocks [MGetRatingHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetRatingHistory extends _i1.Mock implements _i9.MGetRatingHistory {
  @override
  _i7.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.RatingHistory>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, List<_i13.RatingHistory>>>.value(
            _FakeEither_1<_i11.Failure, List<_i13.RatingHistory>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i10.Future<
                _i3.Either<_i11.Failure, List<_i13.RatingHistory>>>.value(
            _FakeEither_1<_i11.Failure, List<_i13.RatingHistory>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.RatingHistory>>>);
}

/// A class which mocks [MGetManyByIds].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetManyByIds extends _i1.Mock implements _i9.MGetManyByIds {
  @override
  _i7.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>> call(
          List<String>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>);
}

/// A class which mocks [MGetLiveStreamers].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetLiveStreamers extends _i1.Mock implements _i9.MGetLiveStreamers {
  @override
  _i7.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeUserRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.UserRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>);
}

/// A class which mocks [MGetFollowingUsers].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetFollowingUsers extends _i1.Mock
    implements _i9.MGetFollowingUsers {
  @override
  _i8.SocialRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSocialRepository_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeSocialRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.SocialRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.User>>>);
}

/// A class which mocks [MFollowUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMFollowUser extends _i1.Mock implements _i9.MFollowUser {
  @override
  _i8.SocialRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSocialRepository_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeSocialRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.SocialRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, bool>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
            _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
                _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, bool>>);
}

/// A class which mocks [MUnfollowUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMUnfollowUser extends _i1.Mock implements _i9.MUnfollowUser {
  @override
  _i8.SocialRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSocialRepository_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeSocialRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.SocialRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, bool>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
            _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
                _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, bool>>);
}
